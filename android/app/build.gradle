def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def homePath = System.properties['user.home'].toString()

def getDebugSigningConfig = {
    return ['androiddebugkey', new File("${rootDir}/debug.keystore"), 'android', 'android']
}

def getReleaseSigningConfig = {
    if ("true".equalsIgnoreCase(System.getenv('CI')) || "true".equalsIgnoreCase(System.getenv('DEBUG'))) {
        return ['androiddebugkey', new File("${rootDir}/debug.keystore"), 'android', 'android']
    }
    final propsFile = new File(homePath + "/.droid/essentiel.keystore.properties")
    def storeFile = file('/dev/null')
    def keyPassword = ""
    if (propsFile.exists()) {
        logger.debug("[Signing] Using properties file located at ${propsFile.absolutePath}")
        final props = new Properties()
        props.load(new FileInputStream(propsFile))
        storeFile = new File(props['keystore'].toString())
        keyPassword = props['keyPassword']
    }
    return ['essentiel', storeFile, keyPassword, keyPassword]
}

def getVersionCodeAndName = {
    flavorName ->
        // Fetch the version according to git latest tag and "how far we are from last tag"
        def longVersionName = "git -C ${rootDir} describe --tags --long HEAD".execute().text.trim()
        def (fullVersionTag, versionBuild, gitSha) = longVersionName.tokenize('-')
        if (!fullVersionTag?.trim()) {
            fullVersionTag = "0.0.0"
        }
        if (!versionBuild?.trim()) {
            versionBuild = "1"
        }
        def latestTagGitCommit = "git -C ${rootDir} rev-list -n 1 ${fullVersionTag}".execute().text.trim()
        def (versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')
        def gitCommitHash = "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()

        logger.debug("[Git] getVersionName($flavorName): \n" +
                "rootDir = $rootDir , \n" +
                "latestTagGitCommit = $latestTagGitCommit , \n" +
                "longVersionName = $longVersionName , \n" +
                "fullVersionTag = $fullVersionTag , \n" +
                "versionBuild = $versionBuild , \n" +
                "gitSha = $gitSha , \n" +
                "versionMajor = $versionMajor , \n" +
                "versionMinor = $versionMinor , \n" +
                "versionPatch = $versionPatch , \n" +
                "gitCommitHash = $gitCommitHash")

        // Return the version name
        final versionNameFullVersionLast = versionBuild ? "-$versionBuild" : ""
        final versionName = "$fullVersionTag$versionNameFullVersionLast/$gitCommitHash-$flavorName"
        final versionCode = (
                versionMajor.toInteger() * 100000 +
                        versionMinor.toInteger() * 10000 +
                        versionPatch.toInteger() * 1000 +
                        versionBuild.toInteger())

        return [versionCode, versionName]
}

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    signingConfigs {
        debug {
            (keyAlias, storeFile, storePassword, keyPassword) = getDebugSigningConfig()
        }
        release {
            (keyAlias, storeFile, storePassword, keyPassword) = getReleaseSigningConfig()
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "app.essentiel"
        minSdkVersion 16
        targetSdkVersion 30

        // Fetch the version according to git latest tag and "how far are we from last tag"
        (versionCode, versionName) = getVersionCodeAndName("android")

        printf("\n-------- VERSION DATA for '$project.name' --------" +
                "\n" +
                "- CODE: " +
                versionCode +
                "\n" +
                "- NAME: " +
                versionName +
                "\n----------------------------\n")
    }

    buildTypes {
        release {
            // Disable fabric build ID generation for debug builds
//            ext.enableCrashlytics = false
//            minifyEnabled true
//            proguardFiles 'proguard-rules.pro'
//            zipAlignEnabled true
            signingConfig signingConfigs.release
        }
        debug {
            // Disable fabric build ID generation for debug builds
//            ext.enableCrashlytics = false
//            minifyEnabled true
//            proguardFiles 'proguard-rules.pro'
//            zipAlignEnabled true
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
